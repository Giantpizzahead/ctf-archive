import socket

SERVER = "2018shell.picoctf.com"
PORT = 46111
BUFFER_SIZE = 4096
DEBUG = True
DEBUG_LOW = False
s = socket.socket()


def main():
    brute_force_question()  # The answer's 5... but I tried that... :(


def brute_force_question():
    """Brute forces question 1 of the test."""
    print("Brute forcing the question...")
    curr_guess = 0
    if DEBUG:
        print("Trying ", end='')
    while True:
        if DEBUG:
            print(curr_guess, end=' ')
        # Try the current guess
        start_connection()
        send_data(str(curr_guess))
        read_intro()

        # Check if the current guess is correct
        output = read_data()
        if "Incorrect!" not in output:
            print()
            print(output)
            print("Correct answer found: " + str(curr_guess))
            break
        elif DEBUG_LOW:
            print()
            print(output, end=' ')

        close_connection()
        curr_guess += 1


def read_intro():
    """Skips the intro text. Adjust as needed."""
    read_data()


def start_connection():
    """Repeatedly attempts to start a socket connection."""
    global s
    while True:
        if DEBUG_LOW:
            print("Starting connection...")
        try:
            s = socket.socket()
            s.settimeout(5)
            s.connect((SERVER, PORT))
            break
        except Exception as e:
            print(e)
            print("Retrying...")


def close_connection():
    """Closes the socket connection. Warning: Is not guaranteed to work!"""
    if DEBUG_LOW:
        print("Closing connection...")
    try:
        s.shutdown(socket.SHUT_RDWR)
        s.close()
    except Exception as e:
        print(e)


def read_data():
    """Reads the next chunk of data."""
    return s.recv(BUFFER_SIZE).decode("utf-8")


def send_data(data):
    """Sends the given data by encoding it with UTF-8, then adding a newline."""
    s.sendall(data.encode("utf-8") + b'\n')


if __name__ == "__main__":
    main()
