"""
PSUEDOCODE

Location of page array: 0x00202068
Stored in a struct
First 8 bytes = Pointer to malloc location
Next 4 bytes = Integer representing "size" of input
Next 4 bytes = Blank padding

Summaries:
new_diary_page looks for a page with a NULL pointer. If it finds one in the first 20 pages, it'll
malloc a size that you give (0-240 or 272-480), and put the pointer to that data in the pages array.

"""

pages = []
page_contents = []
page_sizes = []


def main():
    while True:
        display_menu()
        choice = int(input())
        if choice == 1: new_diary_page()
        elif choice == 2: talk_with_ghost()
        elif choice == 3: listen_to_ghost()
        elif choice == 4: burn_page()
        elif choice == 5:
            print("bye human!")
            return
        else:
            print("Invalid choice")

"""
Asks for a size. You can input from 0-240 and 272-480 bytes.
Mallocs a region of that size, and stores a pointer to it in pages.
"""
def new_diary_page():
    if len(pages) == 20:
        print("Buy new book")
        return
    while True:
        print("Write on (1) one side or (2) both sides")
        choice = int(input())
        if choice == 1:
            # Get desired size from user
            # Must be from 0 to 240
            print("Size:")
            input_size = int(input())
            if input_size > 0xf0:
                print("Too big")
            else:
                break
        elif choice == 2:
            # Get desired size
            # Must be from 272 to 480 (inclusive)
            print("Size:")
            input_size = 0
            input_size = int(input())
            if input_size <= 0x10f:
                print("Don't waste pages")
            elif input_size > 0x1e0:
                print("Can you not write that much")
            else:
                break
    
    # Valid size has been given, seems like one or both sides do the same thing, just allow different sizes
    # Malloc input_size
    malloc(input_size)
    # Allocate a new page struct with data (pointer_to_malloc_data, input_size)
    print("page {}".format(len(pages)))
    pages.append((len(pages) + 1)  * 0x1111111111111111)
    page_sizes.append(input_size)
    page_contents.append("")
    print("DEBUG: Allocated at location {}".format(hex(pages[len(pages)-1])))


def talk_with_ghost():
    print("Page:")
    input_page = int(input())
    print("Content:")
    # Check if is valid page
    if input_page > 19:
        return
    elif pages[input_page] == None:
        return
    get_talk_input(input_page, page_sizes[input_page])


def listen_to_ghost():
    print("Page:")
    input_page = int(input())
    print("Content:")
    if input_page > 19:
        return
    elif pages[input_page] == None:
        return
    else:
        # Just prints what is at the malloc pointer using puts()
        print(page_contents[input_page])


def burn_page():
    print("Page:")
    input_page = int(input())
    if input_page > 19:
        return
    elif pages[input_page] == None:
        return
    else:
        # Frees the block at the malloc pointer
        free(input_page)
        # Never resets the size part of the struct!
        # Most importantly, NEVER CLEARS THE MEMORY!!!!!!
    


def get_talk_input(page_pointer, page_size):
    if page_size == 0: return
    # This would get an input of length page_size characters, ADDING AN EXTRA NULL BYTE AT THE END
    # PAST THE ACTUAL page_size LENGTH
    user_input = input()
    page_contents[page_pointer] = user_input
    print("Input of size {} gotten".format(page_size))
        

def malloc(size):
    print("Called malloc({})".format(hex(size)))


def free(ptr):
    print("Freed page {}".format(ptr))


def display_menu():
    print("(1) New page, (2) Write to page, (3) Read page, (4) Burn page, (5) Exit")


if __name__ == "__main__":
    main()
