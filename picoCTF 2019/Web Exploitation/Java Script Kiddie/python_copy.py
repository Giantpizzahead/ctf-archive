import base64

bytes = [169,157,172,130,69,231,223,122,167,0,231,136,59,69,0,185,156,140,4,71,193,252,166,83,124,0,135,171,49,0,211,169,253,66,123,114,224,63,122,31,0,0,254,191,191,72,255,48,204,80,250,2,182,188,7,224,0,0,193,198,73,192,78,234,196,0,63,31,213,243,102,0,0,120,0,7,0,65,0,251,174,0,41,163,221,156,0,10,1,28,0,0,73,220,68,27,137,12,197,80,187,193,26,114,84,1,0,0,0,40,95,68,0,13,192,207,0,232,1,65,128,72,0,13,155,128,110,0,164,182,96,227,13,0,68,106,203,4,156,0,241,193,32,82,48,178,78,224,0,10,93,216,97,12,32,237,46,166,121,108,237,240,1,122,139,0,3,114,56,8,100,71,124,157,160,220,130,161,0,171,107,73,1,83,102,43,246,252,240,161,7,103,81,36,69,122,228,3,227,76,210,170,31,91,15,226,250,102,124,140,236,237,199,0,11,73,240,87,214,124,146,140,129,72,188,204,73,2,216,177,59,79,111,46,118,226,18,4,204,31,104,174,137,118,173,240,90,96,224,2,243,78,47,224,151,237,167,214,127,18,87,88,74,158,190,181,39,211,167,203,52,250,217,102,158,166,228,230,171,63,223,41,229,248,192,58,116,70,157,4,73,36,169,191,255,112,54,63,188,213,254,136,63,165,45,48,164,35,36,7,76,249,161,212,217,73,217,240,231,2,15,30,126,248,122,127,85,31,55,245,216,155,185,142,52,175,245,77,246,77,160,130,123,204,151,107,35,153,212,115,110,196,54,239,253,164,42,17,119,125,169,111,101,166,127,117,239,109,164,26,102,63,239,5,76,27,221,211,239,127,254,229,84,61,251,170,191,224,63,241,162,27,54,115,213,77,158,71,11,108,240,254,247,143,169,248,59,166,210,99,155,8,248,126,121,152,183,171,128,233,245,167,22,145,134,95,164,25,57,57,58,168,115,167,99,252,101,73,213,213,60,26,242,39,92,6,240,41,155,48,209,75,6,99,171,253,130,107,11,245,186,186,182,106,218,209,78,241,76,230,75,122,193,249,157,164,129,217,188,221,50,50,145,56,198,137,54,160,75,185,151,192,152,254,107,48,96,103,224,118,255,167,186,127,17,225,65,47,4,138,177,82,182,63,254,51,252,108,146,239,82,179,146,186,54,126,124,92,31,62,171,175,73,195,242,229,179,226,37,110,15,70,223,178,74,244,128,124,186,70,225,167,245,239,189,177,53,85,252,145,183,124,19,61,187,252,218,47,59,50,137,233,162,169,62,86,104,247,244,235,59,35,2,212,59,139,55,55,89,156,255,118,191,71,40,207,245,162,245,116,11,223,35,57,166,73,241,123,176,76,242,255,190,69,60,43,38,46,116,239,122,204,174,42,248,83,73,253,190,29,87,192,228,78,212,212,53,251,0,234,191,245,39,234,251,255,195,199,79,186,169,74,190,245,184,126,167,185,245,29,237,18,207,239,225,134,158,140,204,105,87,195,126,137,120,251,177,63,31,44,170,95,239,15,176,95,105,166,109,26,228,255,41,214,240,173,1,137,78,24,110,121,85,37,73,43,247,196,7,250,218,197,130,240,109,53,149,2,202,234]

def main():
    # Going about shifter of 45 is meaningless
    '''
    for byte in bytes:
        val = byte
        if val > 47 and val < 126:
            print(chr(byte), end=' ')
    print("\n")
    '''

    print(to_base64(assemble_png("6391896540475258")).decode("utf-8"))

    print("Finding valid PNG signature keys")
    targets = [0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]
    for i in range(8):
        print("Finding valid key for byte # " + str(i+1))
        for j in range(48, 100):
            print("Trying " + str(j) + " character " + chr(j))
            result = assemble_png(chr(j) * 16)
            # print("Base64:\n" + str(to_base64(result)))
            # print("\n")
            plaintext = decode_bytes(result)
            if (ord(plaintext[i]) == targets[i]):
                print("Valid key found: " + str(j) + " character " + chr(j))
                input()
        else:
            print("No valid key found.")
            input()

    print("Finding valid block length keys")
    targets = [0x00, 0x00, 0x00, 0x0d]
    for i in range(4):
        print("Finding valid key for byte # " + str(i+1))
        for j in range(48, 100):
            print("Trying " + str(j) + " character " + chr(j))
            result = assemble_png(chr(j) * 16)
            # print("Base64:\n" + str(to_base64(result)))
            # print("\n")
            plaintext = decode_bytes(result)
            if (ord(plaintext[i+8]) == targets[i]):
                print("Valid key found: " + str(j) + " character " + chr(j))
                input()
        else:
            print("No valid key found.")
            input()

    print("Finding valid chunk type keys")
    target = "IHDR"
    for i in range(4):
        print("Finding valid key for byte # " + str(i+1))
        for j in range(48, 100):
            print("Trying " + str(j) + " character " + chr(j))
            result = assemble_png(chr(j) * 16)
            # print("Base64:\n" + str(to_base64(result)))
            # print("\n")
            plaintext = decode_bytes(result)
            if (plaintext[i+12] == target[i]):
                print("Valid key found: " + str(j) + " character " + chr(j))
                input()
        else:
            print("No valid key found.")
            input()

#Key: 6391896540473258
#              15 5   
#              26
#              37

# The correct key is 6391896542675258
s
def assemble_png(user_in):
    LEN = 16
    key = "0000000000000000"
    if len(user_in) == LEN:
        key = user_in

    result = [-1 for i in range(len(bytes))]
    for i in range(LEN):
        shifter = ord(key[i]) - 48
        for j in range(len(bytes) // LEN):
            result[(j * LEN) + i] = bytes[(((j + shifter) * LEN) % len(bytes)) + i]

    while result[len(result) - 1] == 0:
        result = result[:-1]

    return result


def to_base64(result):
    return base64.encodebytes(bytearray(result))


def decode_bytes(result):
    return ''.join(map(chr, result))


if __name__ == "__main__":
    main()
