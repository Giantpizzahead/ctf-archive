The AES mode being used is ECB, which is apparently a block cipher. That means I can probably reverse engineer what the key is by using the constant encrypted blocks.

The text is encrypted in blocks of 16 characters, with a 128 bit encrypted block (32 hexadecimal).

The flag is 38 characters long.

________________________________________________________________________________________

Length of message before flag, with empty situation report: 84
Meaning message of length 12 will do it.

Length of message before situation report: 53

Length of message after situation report, before flag: 31

Situation report that would work = 00000000000<report>

Message after flag: {1}.
Down with the Soviets,
006
Length: 28

Finding the length of the flag...
Length of whole message = 113 + flag_length
128, 144 = next cutoffs

122 + flag_length = 160

The flag is 38 characters long.

Message:

"""Agent,
Greetings. My situation report is as follows:
{0}
My agent identifying code is: {1}.
Down with the Soviets,
006
"""

________________________________________________________________________________________

Idea after 'lunch': Go one character at a time, matching the encrypted cipher block to my own generated cipher block to figure out the correct character.

How:
1. Position the flag's first unknown character at the end of a cipher block. Save both the plaintext and the cipher value of this block.
You can show more characters by decreasing the report length by 1, and looping back to 15 zeroes / looking at the next cipher block when you reach the end.

The starting character would use the situation report 000, looking at block #6 (data[160:192]).
This would get the cipher that corresponds to the plaintext "de is: picoCTF{_", where _ is filled in.

2. Then, try every possible character in that location, and submit it as the situation report. Save the whole returned ciphertext, starting from block #5 (data[128:]).
You can do the same thing with all characters by joining the strings "00000000000" and all possible variations of (STEP_1_PLAINTEXT[:-1] + some_character).

The starting character would use the situation report 00000000000de is: picoCTF{ade is: picoCTF{bde is: picoCTF{c . . .
and so on. Joining the strings "00000000000" and all possible variations of "de is: picoCTF{_".

3. Iterate through each cipher block, and find the one that matches the saved ciphertext from step 1. Find the character that was used to generate that cipher block. Save the character.

4. Repeat steps one through three 29 more times to get the entire flag (not including first run). Print the flag. Success! :)