My initial suspicion is that this is the exact same as the first James Brahm one (where you could use the fact that the same ciphertext decoded to the same block to semi-brute force the flag), except you need to duplicate both the target block AND the one before it.

Actually, you need to duplicate ALL the blocks before it in order for this to work. But the IV's different. Uh-oh.

Ok, nevermind. This might be harder than I thought.

Alright, so the way to do this is using a padding oracle attack (again). I'm not entirely sure how to do it, but it has something to do with that fact that both the padding and the IV don't get checked in the mac, meaning that you can edit the padding or the IV in any way you want to, and the mac will still be correct.

My guess is you insert enough text to make the encrypted text have a whole block of padding at the end.

Ok, so the idea is you insert enough text to make the encrypted text have a whole block of padding at the end, and also get your target byte (the one you want to figure out) as the final byte in one of the previous blocks. Then, you encrypt that plaintext using the encryption feature.

Next, you replace the final byte of the final block (currently padding value \x16) with your target byte. Then, you try sending that request to the server. If it gets accepted, with no errors, that means that the decrypted byte at the end MUST be \x16 (because valid padding).

The digest hash (SHA-1) is 20 bytes (characters) long.

133 + flag_length + 14 = 192

147 + flag_length = 192

flag_length = 45

Unknown flag length (not including picoCTF{}) = 36

Needed situation length for whole padding block to be at end = 14, 30, 46, [62]
_____________________________________________________________________________________________________________________

Ok, here are the steps.

1. Generate the situation report / added message to send in. The situation report will be 51 characters long, and the added message will be 11 characters long. To generate these numbers for future characters, the situation report will be 51 - i characters long, and the added message will be 16 - ((51 + 2 - i) % 16) characters long (i is the current iteration if using for i in range(36)). It doesn't matter what these characters are.
Ex: For first character
Report: 0123456789abcdef0123456789abcdef0123456789abcdef012
Adding: 0123456789a

2. Send the report / added message to get encrypted by the online program. Get the resulting ciphertext.

3. Replace the last block of ciphertext with block #9's ciphertext, and try decrypting this new full ciphertext (to check if the last byte becomes "\x16"). If and only if "Successful decryption." is in the output, proceed to step 4. Else, repeat steps 2 and 3 until you get a successful decryption (average 1/256 chance).

4. Use the following formula to get the plaintext character at the target byte location:
Wanted plaintext = \x16 ^ 2nd last block's last byte ^ 8th block's last byte (7 if zero-indexing)

5. Repeat steps 1-4 until you get all 36 characters. Then, print the flag! :)

Ok, small change. Apparently you need to target block 10, so all the block numbers are shifted up by one (NOT because of zero-indexing issues, you actually need to move up by one!).

Ok also the flag was actually only 29 characters long. Don't know how I messed that up. Actually, there were a lot of things that were off by a block. Weird. Oh well... I got the flag though! :)

Flag: picoCTF{g0_@g3nt006!_9101447}