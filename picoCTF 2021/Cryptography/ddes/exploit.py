#!/usr/bin/python3 -u
from Crypto.Cipher import DES
import binascii
import itertools
import random
import string


def pad(msg):
    block_len = 8
    over = len(msg) % block_len
    pad = block_len - over
    return (msg + " " * pad).encode()

def encrypt(m, key):
    msg = pad(m)

    cipher = DES.new(key, DES.MODE_ECB)
    enc_msg = cipher.encrypt(msg)
    return binascii.hexlify(enc_msg).decode()

def decrypt(m, key):
    cipher = DES.new(key, DES.MODE_ECB)
    m = binascii.unhexlify(m)
    dec_msg = cipher.decrypt(m)
    return binascii.hexlify(dec_msg).decode()

plain = binascii.unhexlify(input("Enter plaintext: ").rstrip()).decode()
enc = input("Enter encoded: ").rstrip()
flag = input("Enter flag: ").rstrip()

middle_lookup = {}
for key in itertools.product('1234567890', repeat=6):
    key_str = "".join(key) + "  "
    enc1 = encrypt(plain, key_str)
    middle_lookup[enc1] = key_str

for key in itertools.product('1234567890', repeat=6):
    key_str = "".join(key) + "  "
    dec1 = decrypt(enc, key_str)
    if dec1 in middle_lookup:
        print("Key 1:", middle_lookup[dec1])
        print("Key 2:", key_str)
        print("FLAG:", binascii.unhexlify(decrypt(decrypt(flag, key_str), middle_lookup[dec1])).decode())
        break
