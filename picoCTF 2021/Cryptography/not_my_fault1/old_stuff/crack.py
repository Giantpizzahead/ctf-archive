#!/usr/bin/python3 -u
import random
import string
import hashlib
import time

from Crypto.Util.number import inverse, getPrime, bytes_to_long, GCD
from sympy.ntheory import factorint
from sympy.ntheory.modular import solve_congruence

'''
mod = tot(N)/2
'''
def CRT(a, m, b, n):
	val, mod = solve_congruence((a, m), (b, n))
	print("CRT({}, {}, {}, {}) => ({}, {})".format(a, m, b, n, val, mod))
	return val, mod

n = 107871909138808667461167347327415642670367402313471503576824194540760629831340954522479337536147588327119912141527331805824500004429714721944466434153279155427920302833252904628759545325269544108722880102652510926642275921518377986524842632564267193904494403309400019514692056893231093659095811756041449926327
e = 97214324694708147313423516126834113324514161750986837792532957722683648159466191431786477510244654329828366539197176624140751545017604579794173347981882539780065770654429106150388874692209431292094596163815056202797545172028319460978055819937021719498146376263720877035379411187129446240806335319923478346653

# n = int(input("N: "))
# e = int(input("e: "))

BITS = 20
for d_p in range(1, (1 << BITS)+1):
	d_p = 811647
	for k in range(7, d_p+1):
		val = d_p * e - 1# + k
		print("Factoring {}".format(val))
		print(factorint(val))
		# gcd = GCD(val, n)
		# if gcd != 1: print(d_p, k, " = ", GCD(val, n), n/GCD(val, n))

'''
while True:
	p = getPrime(20)
	q = getPrime(20)
	if GCD(p-1, q-1) == 2:
		d_q = random.randint(1, q-1)
		for d_p in range(1, min(p-1,100)):
			if d_p % 2 == d_q % 2:
				crt_val, crt_mod = CRT(d_p, p-1, d_q, q-1)
				assert crt_mod == (p-1)*(q-1)//2
				print("tot(N) =", (p-1)*(q-1))
				print()
		break

N:  107871909138808667461167347327415642670367402313471503576824194540760629831340954522479337536147588327119912141527331805824500004429714721944466434153279155427920302833252904628759545325269544108722880102652510926642275921518377986524842632564267193904494403309400019514692056893231093659095811756041449926327

CRT(811647, 10106336817187720683689959177849550604265220835779588412622934812954308237347785856676294724946746836940921056756832618709190924099999879807175836454945330, 9991381468245108114335123033683929611195195209470200167999744773049278543053971082272270680753684409861300352462303833433580418791311500817598914138167781, 10673690288587281211201578461819575238017638082793499422912382138976242456582429291822709358164149638713353351889457834268080458907923427543043923768804716) => (23315002639736760752769566912557232531236542992387165756486420791183372378217642422395383225298999915770483581764969679991063854962959298487048989656506341043372293650327789589798563180922789726498506224578032922107649569212028125228159146333495443989533468971887881117580452276580186089449767954387195475117, 53935954569404333730583673663707821335183701156735751788412097270380314915670477261239668768073794163559956070763665902912250002214857360972233217076639567323946598529125504868610952828071850912931980764782337695662661995483842028154847066780092041504009374517495686612119539810924042867894230768140613088140)

e:  97214324694708147313423516126834113324514161750986837792532957722683648159466191431786477510244654329828366539197176624140751545017604579794173347981882539780065770654429106150388874692209431292094596163815056202797545172028319460978055819937021719498146376263720877035379411187129446240806335319923478346653

p:  10106336817187720683689959177849550604265220835779588412622934812954308237347785856676294724946746836940921056756832618709190924099999879807175836454945331

q:  10673690288587281211201578461819575238017638082793499422912382138976242456582429291822709358164149638713353351889457834268080458907923427543043923768804717
'''